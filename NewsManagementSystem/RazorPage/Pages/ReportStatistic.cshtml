@page
@model RazorPage.Pages.ReportStatisticModel

@{
    ViewData["Title"] = "News Creation Report";
}

<!-- Necessary Libraries -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />

<style>
    :root {
        --primary-color: #1a73e8;
        --secondary-color: #5f6368;
        --light-bg: #f8fafc;
        --text-color: #202124;
        --shadow-color: rgba(0, 0, 0, 0.15);
        --gradient-start: #1a73e8;
        --gradient-end: #34c759;
    }

    body {
        font-family: 'Poppins', sans-serif;
        background: linear-gradient(135deg, var(--light-bg), #e9ecef);
        color: var(--text-color);
        min-height: 100vh;
    }

    .card {
        border: none;
        border-radius: 20px;
        box-shadow: 0 6px 20px var(--shadow-color);
        background: #fff;
        transition: transform 0.4s ease, box-shadow 0.4s ease;
    }

    .card:hover {
        transform: translateY(-10px);
        box-shadow: 0 12px 30px var(--shadow-color);
    }

    .header {
        background: linear-gradient(135deg, var(--gradient-start), var(--gradient-end));
        color: #fff;
        padding: 2rem;
        border-radius: 20px 20px 0 0;
        text-align: center;
    }

    .header h1 {
        font-size: 2rem;
        font-weight: 700;
        margin: 0;
        text-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }

    .filter-container {
        background: #fff;
        border-radius: 15px;
        padding: 1.5rem;
        box-shadow: 0 4px 15px var(--shadow-color);
        transition: all 0.3s ease;
        margin-bottom: 2rem;
    }

    .filter-container:hover {
        box-shadow: 0 6px 20px var(--shadow-color);
        transform: translateY(-5px);
    }

    .form-label {
        font-weight: 600;
        color: var(--primary-color);
    }

    .form-control {
        border-radius: 10px;
        border-color: #ddd;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

    .form-control:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 8px rgba(26, 115, 232, 0.3);
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--gradient-start), var(--gradient-end));
        border: none;
        border-radius: 10px;
        padding: 0.5rem 1.5rem;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-primary:hover {
        background: linear-gradient(135deg, #1557b0, #28a745);
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(26, 115, 232, 0.3);
    }

    #newsChart {
        max-width: 100%;
        margin: 0 auto;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 4px 15px var(--shadow-color);
        animation: fadeInUp 0.5s ease-in-out;
    }

    keyframes fadeInUp {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
</style>

<div class="container mt-5 mb-5">
    <div class="card animate__animated animate__fadeIn">
        <div class="header">
            <h1>@ViewData["Title"]</h1>
        </div>

        <div class="card-body p-4">
            <!-- Date filter form -->
            <div class="filter-container animate__animated animate__fadeInUp">
                <form method="get" class="row g-3 align-items-end">
                    <div class="col-md-5">
                        <label for="fromDate" class="form-label">From Date</label>
                        <input type="date" id="fromDate" name="FromDate" value="@Model.FromDate?.ToString("yyyy-MM-dd")" class="form-control" />
                    </div>
                    <div class="col-md-5">
                        <label for="toDate" class="form-label">To Date</label>
                        <input type="date" id="toDate" name="ToDate" value="@Model.ToDate?.ToString("yyyy-MM-dd")" class="form-control" />
                    </div>
                    <div class="col-md-2">
                        <button type="submit" class="btn btn-primary w-100">
                            <i class="bi bi-filter"></i> Filter
                        </button>
                    </div>
                </form>
            </div>

            <!-- Canvas for the chart -->
            <div class="mt-4">
                <canvas id="newsChart" width="800" height="400"></canvas>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Include Chart.js from a CDN -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Include SignalR client library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>

    <script>
        // Convert the server-side report data to JavaScript
        var reports = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.NewsCreationReports));

        // Create initial labels and counts
        var labels = reports.map(function (item) {
            var date = new Date(item.Date);
            var day = ("0" + date.getDate()).slice(-2);
            var month = ("0" + (date.getMonth() + 1)).slice(-2);
            var year = date.getFullYear();
            return day + "/" + month + "/" + year;
        });
        var counts = reports.map(function (item) {
            return item.Count;
        });

        // Create the Chart.js bar chart with gradient
        var ctx = document.getElementById('newsChart').getContext('2d');
        var gradient = ctx.createLinearGradient(0, 0, 0, 400);
        gradient.addColorStop(0, 'rgba(54, 162, 235, 0.8)');
        gradient.addColorStop(1, 'rgba(75, 192, 192, 0.5)');

        var newsChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'News Created',
                    data: counts,
                    backgroundColor: gradient,
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 2,
                    borderRadius: 5,
                    barThickness: 20,
                    hoverBackgroundColor: 'rgba(54, 162, 235, 1)',
                    hoverBorderColor: 'rgba(54, 162, 235, 1)'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            precision: 0,
                            color: var(--text-color)
                        },
                        grid: {
                            color: 'rgba(0, 0, 0, 0.1)'
                        }
                    },
                    x: {
                        ticks: {
                            color: var(--text-color)
                        },
                        grid: {
                            display: false
                        }
                    }
                },
                plugins: {
                    legend: {
                        labels: {
                            color: var(--text-color),
                            font: {
                                size: 14,
                                weight: '600'
                            }
                        }
                    },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: '#fff',
                        bodyColor: '#fff',
                        borderColor: var(--primary-color),
                        borderWidth: 1
                    }
                },
                animation: {
                    duration: 1000,
                    easing: 'easeInOutQuad'
                },
                hover: {
                    mode: 'nearest',
                    intersect: true
                }
            }
        });

        // Set up the SignalR connection
        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/myHub")
            .build();

        // Listen for updates from the hub
        connection.on("ReceiveNewsData", function (updatedReports) {
            var newLabels = updatedReports.map(function (item) {
                var date = new Date(item.date);
                var day = ("0" + date.getDate()).slice(-2);
                var month = ("0" + (date.getMonth() + 1)).slice(-2);
                var year = date.getFullYear();
                return day + "/" + month + "/" + year;
            });
            var newCounts = updatedReports.map(function (item) {
                return item.count;
            });

            // Update chart data and refresh with animation
            newsChart.data.labels = newLabels;
            newsChart.data.datasets[0].data = newCounts;
            newsChart.update({
                duration: 800,
                easing: 'easeInOutQuad'
            });
        });

        // Start the SignalR connection
        connection.start().catch(function (err) {
            console.error(err.toString());
        });
    </script>
}